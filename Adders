`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Engineer: Demetri Kostas
// Create Date: 09/20/2024 01:36:39 PM
// Module Name: Adder
// Project Name: ECE128Lab3
// Revision:
// Revision 0.01 - File Created
//////////////////////////////////////////////////////////////////////////////////


module one_bit_full_adder(A, B, CI, SUM, CO);
	input A, B, CI;
	output SUM, CO;
	
	assign {CO, SUM} = A+B+CI;
endmodule

/**
module two_bit_full_ripple_adder(A, B, CI, seg);
	input [1:0] A, B;
	input CI;
	wire [1:0] SUM; 
	wire CO, curr_C;
	output [6:0] seg;
	wire [3:0] ytt;
	//wire [3:0] yttCO;
	
	assign CI = 1'b0;
	assign ytt = {1'b0, CO, SUM};
	//assign yttCO = {3'b0,CO};
	
	one_bit_full_adder DUT1(.A(A[0]), .B(B[0]), .CI(CI), .SUM(SUM[0]), .CO(curr_C));
	one_bit_full_adder DUT2(.A(A[1]), .B(B[1]), .CI(curr_C), .SUM(SUM[1]), .CO(CO));
	BCD_7_seg_conv DUT3(.num(ytt), .seg(seg));//To display SUM
	//BCD_7_seg_conv DUT4(.num(yttCO), .seg(seg_CO));//To display Carry out
	
endmodule
*/

module two_bit_full_carry_lookahead_adder(A, B, CI, seg);
	input [1:0] A, B;
	input CI;
	wire [1:0] SUM, S, P, G; 
	wire CO, curr_C, curr_Cx, COx;
	output [6:0] seg;
	wire [3:0] ytt;
	//wire [3:0] yttCO;

	//assign CI = 1'b0;
	assign ytt = {1'b0, CO, SUM};
	
	assign P[0] = A[0] ^ B[0];
	assign S[0] = P[0] ^ CI;
	assign G[0] = A[0] & B[0];
	assign curr_C = G[0] | (P[0]&CI);
	assign P[1] = A[1] ^ B[1];
	assign S[1] = P[1] ^ curr_C;
	assign G[1] = A[1] & B[1];
	assign CO = G[1] | (P[1]&curr_C);
	
	//assign yttCO = {3'b0,CO};
	
	one_bit_full_adder DUT1(.A(A[0]), .B(B[0]), .CI(CI), .SUM(SUM[0]), .CO(curr_Cx));
	one_bit_full_adder DUT2(.A(A[1]), .B(B[1]), .CI(curr_C), .SUM(SUM[1]), .CO(COx));
	
	
	BCD_7_seg_conv DUT3(.num(ytt), .seg(seg));//To display SUM
	//BCD_7_seg_conv DUT4(.num(yttCO), .seg(seg_CO));//To display Carry out
	
endmodule

module BCD_7_seg_conv(num, seg);
	input [3:0] num;
	//output dp;
	output [6:0] seg;
	//output [7:0] anode:
	
	//assign anode = {{7{1'b1}},~valid};
	//assign dp = 1'b1; //decimal point
	assign seg[0] = (num==4'd1) | (num==4'd4);
	assign seg[1] = (num==4'd5) | (num==4'd6);
	assign seg[2] = (num==4'd2);
	assign seg[3] = (num==4'd1) | (num==4'd4) | (num==4'd7);
	assign seg[4] = (num==4'd1) | (num==4'd3) | (num==4'd4) | (num==4'd5) | (num==4'd7) | (num==4'd9);
	assign seg[5] = (num==4'd1) | (num==4'd2) | (num==4'd3) | (num==4'd7);
	assign seg[6] = (num==4'd0) | (num==4'd1) | (num==4'd7);
endmodule
